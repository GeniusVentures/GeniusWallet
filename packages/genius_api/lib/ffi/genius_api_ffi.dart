// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> GeniusSDKInit(
    ffi.Pointer<ffi.Char> base_path,
    ffi.Pointer<ffi.Char> eth_private_key,
    bool autodht,
    bool process,
    int baseport,
  ) {
    return _GeniusSDKInit(
      base_path,
      eth_private_key,
      autodht,
      process,
      baseport,
    );
  }

  late final _GeniusSDKInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool,
              ffi.Uint16)>>('GeniusSDKInit');
  late final _GeniusSDKInit = _GeniusSDKInitPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, bool, int)>();


  ffi.Pointer<ffi.Char> GeniusSDKInitSecure(
    ffi.Pointer<ffi.Char> base_path,
    ffi.Pointer<ffi.Char> dev_config,
    ffi.Pointer<ffi.Char> eth_private_key,
    bool autodht,
    bool process,
    int baseport,
  ) {
    return _GeniusSDKInitSecure(
      base_path,
      dev_config,
      eth_private_key,
      autodht,
      process,
      baseport,
    );
  }

  late final _GeniusSDKInitSecurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool,
              ffi.Uint16)>>('GeniusSDKInitSecure');
  late final _GeniusSDKInitSecure = _GeniusSDKInitSecurePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, bool, int)>();


  ffi.Pointer<ffi.Char> GeniusSDKInitMinimal(
    ffi.Pointer<ffi.Char> base_path,
    ffi.Pointer<ffi.Char> eth_private_key,
    int baseport,
  ) {
    return _GeniusSDKInitMinimal(
      base_path,
      eth_private_key,
      baseport,
    );
  }

  late final _GeniusSDKInitMinimalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Uint16)>>('GeniusSDKInitMinimal');
  late final _GeniusSDKInitMinimal = _GeniusSDKInitMinimalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void GeniusSDKShutdown() {
    return _GeniusSDKShutdown();
  }

  late final _GeniusSDKShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('GeniusSDKShutdown');
  late final _GeniusSDKShutdown =
      _GeniusSDKShutdownPtr.asFunction<void Function()>();

  /// @brief Retrieves the current balance for a specific token.
  /// @param[in] token_id  Token identifier to query.
  /// @return The balance amount as a `uint64_t` value (in Minion Tokens).
  int GeniusSDKGetBalance(
    GeniusTokenID token_id,
  ) {
    return _GeniusSDKGetBalance(
      token_id,
    );
  }

  late final _GeniusSDKGetBalancePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(GeniusTokenID)>>(
          'GeniusSDKGetBalance');
  late final _GeniusSDKGetBalance =
      _GeniusSDKGetBalancePtr.asFunction<int Function(GeniusTokenID)>();

  /// @brief Retrieves the current balance in **Genius Tokens** as a formatted string.
  /// @return The balance as a `GeniusTokenValue` struct, containing a GNUS value in string format.
  GeniusTokenValue GeniusSDKGetBalanceGNUS() {
    return _GeniusSDKGetBalanceGNUS();
  }

  late final _GeniusSDKGetBalanceGNUSPtr =
      _lookup<ffi.NativeFunction<GeniusTokenValue Function()>>(
          'GeniusSDKGetBalanceGNUS');
  late final _GeniusSDKGetBalanceGNUS =
      _GeniusSDKGetBalanceGNUSPtr.asFunction<GeniusTokenValue Function()>();

  /// @brief Retrieves the current balance in **Genius Tokens** as a formatted string.
  /// @return A pointer to a null-terminated UTF-8 string representing the current balance in GNUS.
  ffi.Pointer<ffi.Char> GeniusSDKGetBalanceGNUSString() {
    return _GeniusSDKGetBalanceGNUSString();
  }

  late final _GeniusSDKGetBalanceGNUSStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GeniusSDKGetBalanceGNUSString');
  late final _GeniusSDKGetBalanceGNUSString = _GeniusSDKGetBalanceGNUSStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Retrieves the current USD price of gnus
  /// @return The price as a `double` value in USD.
  double GeniusSDKGetGNUSPrice() {
    return _GeniusSDKGetGNUSPrice();
  }

  late final _GeniusSDKGetGNUSPricePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'GeniusSDKGetGNUSPrice');
  late final _GeniusSDKGetGNUSPrice =
      _GeniusSDKGetGNUSPricePtr.asFunction<double Function()>();

  GeniusAddress GeniusSDKGetAddress() {
    return _GeniusSDKGetAddress();
  }

  late final _GeniusSDKGetAddressPtr =
      _lookup<ffi.NativeFunction<GeniusAddress Function()>>(
          'GeniusSDKGetAddress');
  late final _GeniusSDKGetAddress =
      _GeniusSDKGetAddressPtr.asFunction<GeniusAddress Function()>();

  GeniusMatrix GeniusSDKGetInTransactions() {
    return _GeniusSDKGetInTransactions();
  }

  late final _GeniusSDKGetInTransactionsPtr =
      _lookup<ffi.NativeFunction<GeniusMatrix Function()>>(
          'GeniusSDKGetInTransactions');
  late final _GeniusSDKGetInTransactions =
      _GeniusSDKGetInTransactionsPtr.asFunction<GeniusMatrix Function()>();

  GeniusMatrix GeniusSDKGetOutTransactions() {
    return _GeniusSDKGetOutTransactions();
  }

  late final _GeniusSDKGetOutTransactionsPtr =
      _lookup<ffi.NativeFunction<GeniusMatrix Function()>>(
          'GeniusSDKGetOutTransactions');
  late final _GeniusSDKGetOutTransactions =
      _GeniusSDKGetOutTransactionsPtr.asFunction<GeniusMatrix Function()>();

  void GeniusSDKFreeTransactions(
    GeniusMatrix matrix,
  ) {
    return _GeniusSDKFreeTransactions(
      matrix,
    );
  }

  late final _GeniusSDKFreeTransactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GeniusMatrix)>>(
          'GeniusSDKFreeTransactions');
  late final _GeniusSDKFreeTransactions =
      _GeniusSDKFreeTransactionsPtr.asFunction<void Function(GeniusMatrix)>();

  /// @brief     Mints new tokens specified in **Minion Tokens**.
  /// @param[in] amount           The amount to be minted in Minion Tokens.
  /// @param[in] transaction_hash A null-terminated string representing the transaction hash.
  /// @param[in] chain_id         A null-terminated string representing the blockchain chain ID.
  /// @param[in] token_id         Token identifier.
  void GeniusSDKMint(
    int amount,
    ffi.Pointer<ffi.Char> transaction_hash,
    ffi.Pointer<ffi.Char> chain_id,
    GeniusTokenID token_id,
  ) {
    return _GeniusSDKMint(
      amount,
      transaction_hash,
      chain_id,
      token_id,
    );
  }

  late final _GeniusSDKMintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GeniusTokenID)>>('GeniusSDKMint');
  late final _GeniusSDKMint = _GeniusSDKMintPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, GeniusTokenID)>();

  /// @brief     Mints new tokens using a **Genius Token** string format.
  /// @param[in] amount           Pointer to a `GeniusTokenValue` struct representing the amount in GNUS.
  /// @param[in] transaction_hash A null-terminated string representing the transaction hash.
  /// @param[in] chain_id         A null-terminated string representing the blockchain chain ID.
  void GeniusSDKMintGNUS(
    ffi.Pointer<GeniusTokenValue> amount,
    ffi.Pointer<ffi.Char> transaction_hash,
    ffi.Pointer<ffi.Char> chain_id,
  ) {
    return _GeniusSDKMintGNUS(
      amount,
      transaction_hash,
      chain_id,
    );
  }

  late final _GeniusSDKMintGNUSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GeniusTokenValue>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('GeniusSDKMintGNUS');
  late final _GeniusSDKMintGNUS = _GeniusSDKMintGNUSPtr.asFunction<
      void Function(ffi.Pointer<GeniusTokenValue>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief     Transfers tokens in **Minion Tokens** to another address.
  /// @param[in] amount    The amount to transfer in Minion Tokens.
  /// @param[in] dest      Pointer to a `GeniusAddress` struct representing the recipient's address.
  /// @param[in] token_id  Token identifier.
  /// @return `true` if the transfer is successful, `false` otherwise.
  bool GeniusSDKTransfer(
    int amount,
    ffi.Pointer<GeniusAddress> dest,
    GeniusTokenID token_id,
  ) {
    return _GeniusSDKTransfer(
      amount,
      dest,
      token_id,
    );
  }

  late final _GeniusSDKTransferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Uint64, ffi.Pointer<GeniusAddress>,
              GeniusTokenID)>>('GeniusSDKTransfer');
  late final _GeniusSDKTransfer = _GeniusSDKTransferPtr.asFunction<
      bool Function(int, ffi.Pointer<GeniusAddress>, GeniusTokenID)>();

  /// @brief     Transfers tokens using a **Genius Token** string representation.
  /// @param[in] gnus Pointer to a `GeniusTokenValue` struct representing the amount in GNUS.
  /// @param[in] dest Pointer to a `GeniusAddress` struct representing the recipient's address.
  /// @return `true` if the transfer is successful, `false` otherwise.
  bool GeniusSDKTransferGNUS(
    ffi.Pointer<GeniusTokenValue> gnus,
    ffi.Pointer<GeniusAddress> dest,
  ) {
    return _GeniusSDKTransferGNUS(
      gnus,
      dest,
    );
  }

  late final _GeniusSDKTransferGNUSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<GeniusTokenValue>,
              ffi.Pointer<GeniusAddress>)>>('GeniusSDKTransferGNUS');
  late final _GeniusSDKTransferGNUS = _GeniusSDKTransferGNUSPtr.asFunction<
      bool Function(
          ffi.Pointer<GeniusTokenValue>, ffi.Pointer<GeniusAddress>)>();

  /// @brief     Pays the developer for in-game transactions.
  /// @param[in] amount The amount to transfer in Minion Tokens.
  /// @param[in] token_id token identifier.
  /// @return `true` if the transfer is successful, `false` otherwise.
  bool GeniusSDKPayDev(
    int amount,
    GeniusTokenID token_id,
  ) {
    return _GeniusSDKPayDev(
      amount,
      token_id,
    );
  }

  late final _GeniusSDKPayDevPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Uint64, GeniusTokenID)>>(
          'GeniusSDKPayDev');
  late final _GeniusSDKPayDev =
      _GeniusSDKPayDevPtr.asFunction<bool Function(int, GeniusTokenID)>();

  /// @brief Computes the cost of an operation based on the given JSON data (in **Minion Tokens**).
  /// @param[in] jsondata The JSON data to be processed.
  /// @return A `uint64_t` representing the cost in Minion Tokens.
  int GeniusSDKGetCost(
    ffi.Pointer<ffi.Char> jsondata,
  ) {
    return _GeniusSDKGetCost(
      jsondata,
    );
  }

  late final _GeniusSDKGetCostPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Char>)>>(
          'GeniusSDKGetCost');
  late final _GeniusSDKGetCost =
      _GeniusSDKGetCostPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Computes the cost of an operation based on the given JSON data (in **Genius Tokens**).
  /// @param[in] jsondata The JSON data to be processed.
  /// @return A `GeniusTokenValue` struct representing the cost in Genius Tokens.
  GeniusTokenValue GeniusSDKGetCostGNUS(
    ffi.Pointer<ffi.Char> jsondata,
  ) {
    return _GeniusSDKGetCostGNUS(
      jsondata,
    );
  }

  late final _GeniusSDKGetCostGNUSPtr = _lookup<
          ffi.NativeFunction<GeniusTokenValue Function(ffi.Pointer<ffi.Char>)>>(
      'GeniusSDKGetCostGNUS');
  late final _GeniusSDKGetCostGNUS = _GeniusSDKGetCostGNUSPtr.asFunction<
      GeniusTokenValue Function(ffi.Pointer<ffi.Char>)>();

  void GeniusSDKProcess(
    ffi.Pointer<ffi.Char> jsondata,
  ) {
    return _GeniusSDKProcess(
      jsondata,
    );
  }

  late final _GeniusSDKProcessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'GeniusSDKProcess');
  late final _GeniusSDKProcess =
      _GeniusSDKProcessPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}

typedef __u_char = ffi.UnsignedChar;
typedef Dart__u_char = int;
typedef __u_short = ffi.UnsignedShort;
typedef Dart__u_short = int;
typedef __u_int = ffi.UnsignedInt;
typedef Dart__u_int = int;
typedef __u_long = ffi.UnsignedLong;
typedef Dart__u_long = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.Long;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;
typedef __int_least8_t = __int8_t;
typedef __uint_least8_t = __uint8_t;
typedef __int_least16_t = __int16_t;
typedef __uint_least16_t = __uint16_t;
typedef __int_least32_t = __int32_t;
typedef __uint_least32_t = __uint32_t;
typedef __int_least64_t = __int64_t;
typedef __uint_least64_t = __uint64_t;
typedef __quad_t = ffi.Long;
typedef Dart__quad_t = int;
typedef __u_quad_t = ffi.UnsignedLong;
typedef Dart__u_quad_t = int;
typedef __intmax_t = ffi.Long;
typedef Dart__intmax_t = int;
typedef __uintmax_t = ffi.UnsignedLong;
typedef Dart__uintmax_t = int;
typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __ino64_t = ffi.UnsignedLong;
typedef Dart__ino64_t = int;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef __nlink_t = ffi.UnsignedLong;
typedef Dart__nlink_t = int;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef __rlim_t = ffi.UnsignedLong;
typedef Dart__rlim_t = int;
typedef __rlim64_t = ffi.UnsignedLong;
typedef Dart__rlim64_t = int;
typedef __id_t = ffi.UnsignedInt;
typedef Dart__id_t = int;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;
typedef __suseconds64_t = ffi.Long;
typedef Dart__suseconds64_t = int;
typedef __daddr_t = ffi.Int;
typedef Dart__daddr_t = int;
typedef __key_t = ffi.Int;
typedef Dart__key_t = int;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef __timer_t = ffi.Pointer<ffi.Void>;
typedef __blksize_t = ffi.Long;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;
typedef __blkcnt64_t = ffi.Long;
typedef Dart__blkcnt64_t = int;
typedef __fsblkcnt_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt_t = int;
typedef __fsblkcnt64_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt64_t = int;
typedef __fsfilcnt_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt_t = int;
typedef __fsfilcnt64_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt64_t = int;
typedef __fsword_t = ffi.Long;
typedef Dart__fsword_t = int;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;
typedef __syscall_ulong_t = ffi.UnsignedLong;
typedef Dart__syscall_ulong_t = int;
typedef __loff_t = __off64_t;
typedef __caddr_t = ffi.Pointer<ffi.Char>;
typedef __intptr_t = ffi.Long;
typedef Dart__intptr_t = int;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;
typedef __sig_atomic_t = ffi.Int;
typedef Dart__sig_atomic_t = int;
typedef int_least8_t = __int_least8_t;
typedef int_least16_t = __int_least16_t;
typedef int_least32_t = __int_least32_t;
typedef int_least64_t = __int_least64_t;
typedef uint_least8_t = __uint_least8_t;
typedef uint_least16_t = __uint_least16_t;
typedef uint_least32_t = __uint_least32_t;
typedef uint_least64_t = __uint_least64_t;
typedef int_fast8_t = ffi.SignedChar;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Long;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Long;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Long;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.UnsignedChar;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.UnsignedLong;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.UnsignedLong;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.UnsignedLong;
typedef Dartuint_fast64_t = int;
typedef intmax_t = __intmax_t;
typedef uintmax_t = __uintmax_t;

final class GeniusArray extends ffi.Struct {
  @ffi.Uint64()
  external int size;

  external ffi.Pointer<ffi.Uint8> ptr;
}

final class GeniusMatrix extends ffi.Struct {
  @ffi.Uint64()
  external int size;

  external ffi.Pointer<GeniusArray> ptr;
}

final class GeniusAddress extends ffi.Struct {
  /// A string prepended with `0x` followed by 64 hex characters,
  /// including a null-terminating char just for safety.
  @ffi.Array.multi([67])
  external ffi.Array<ffi.Char> address;
}

/// @brief Represents a Genius token value in fixed-point format as a string.
///
/// This structure provides enough space to hold the largest possible Genius token
/// string value ("18446744073709.551615") plus the null terminator.
final class GeniusTokenValue extends ffi.Struct {
  /// < String representation of the Genius token value
  @ffi.Array.multi([22])
  external ffi.Array<ffi.Char> value;
}

/// @brief A binary identifier for a Genius-compatible token.
final class GeniusTokenID extends ffi.Struct {
  /// < 32-byte raw token ID used internally
  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> data;
}

typedef PayAmount_t = ffi.Uint64;
typedef DartPayAmount_t = int;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
